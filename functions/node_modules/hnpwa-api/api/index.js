"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(require("./interfaces"));
const interfaces_1 = require("./interfaces");
const stories_1 = require("./stories");
const item_1 = require("./item");
const user_1 = require("./user");
exports.MAX_PAGES = {
    "news": 10,
    "jobs": 1,
    "ask": 3,
    "show": 2,
    "/": 10
};
// Constant Hash of API topics 
exports.apiMap = {
    NEWS: 'topstories',
    NEWEST: 'newstories',
    ASK: 'askstories',
    SHOW: 'showstories',
    JOBS: 'jobstories',
    ITEM: 'item',
    USER: 'user'
};
/**
 * Helper method for generating a "story" feed. Top level keys like
 * "topstories" and "newstories" return an array of child keys which require
 * subsequent fetching.
 * @param key
 * @param options
 */
function storyFactory(key, app) {
    return (options) => stories_1.stories(key, options, app);
}
/**
 * The aggregated API for interfacing with Hacker News.
 */
const api = (app) => {
    return {
        index() {
            return {
                name: 'Welcome to the HNPWA API'
            };
        },
        news(options) {
            return storyFactory(exports.apiMap.NEWS, app)(options);
        },
        newest(options) {
            return storyFactory(exports.apiMap.NEWEST, app)(options);
        },
        ask(options) {
            return storyFactory(exports.apiMap.ASK, app)(options);
        },
        show(options) {
            return storyFactory(exports.apiMap.SHOW, app)(options);
        },
        jobs(options) {
            return storyFactory(exports.apiMap.JOBS, app)(options);
        },
        user(id) {
            return user_1.getUser(id, app);
        },
        item(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const itemsWithComments = yield item_1.getItemAndComments(id, app);
                return interfaces_1.itemMap(itemsWithComments);
            });
        },
    };
};
exports.default = api;
