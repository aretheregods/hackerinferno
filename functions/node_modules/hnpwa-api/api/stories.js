"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("../api");
/**
 * Retrieve a set of "stories" based on the HN topic ("topstories",
 * "newstories", etc...).
 * @param topic - topstories, newstories, askstories, jobstories, etc...
 * @param options - { page: number }
 */
function stories(topic, options, firebaseApp) {
    return __awaiter(this, void 0, void 0, function* () {
        const opts = Object.assign({ page: 1 }, options);
        const limit = 30;
        const startIndex = (opts.page - 1) * limit;
        const endIndex = startIndex + limit;
        const ref = firebaseApp.database().ref('v0');
        const storyRef = ref.child(topic).limitToFirst(limit * opts.page);
        const stories = yield storyRef.once('value');
        const items = stories.val().slice(startIndex, endIndex);
        const promises = items.map(id => ref.child('item').child(id.toString()).once('value'));
        const resolves = yield Promise.all(promises.map((snap) => __awaiter(this, void 0, void 0, function* () {
            const snapshot = yield snap;
            const item = snapshot.val();
            return api_1.story(item);
        })));
        return resolves;
    });
}
exports.stories = stories;
