export interface HackerNewsItem {
    /** The item's unique id */
    id: number;
    /** true if the item is deleted */
    deleted?: boolean;
    /** The type of item. One of "job", "story", "comment", "poll", or "pollopt" */
    type: 'job' | 'story' | 'comment' | 'poll' | 'pollopt';
    /** The username of the item's author */
    by: string;
    /** Creation date of the item, in Unix Time */
    time: number;
    /** The comment, story or poll text. HTML */
    text: string;
    /** true if the item is dead */
    dead?: boolean;
    /** The comment's parent: either another comment or the relevant story */
    parent: number;
    /** The pollopt's associated poll */
    poll: number;
    /** The ids of the item's comments, in ranked display order */
    kids: number[];
    /** The URL of the story */
    url?: string;
    /** The story's score, or the votes for a pollopt */
    score: number;
    /** The title of the story, poll or job */
    title: string;
    /** A list of related pollopts, in display order */
    parts: number[];
    /** In the case of stories or polls, the total comment count */
    descendants: number;
}
/**
 * UI friendly "story" representation. Based on the HackerNewsItem which is
 * returned directly from the HN API. Used for feeds like "news", "jobs",
 * "ask", "show", etc...
 */
export interface Story {
    id: number;
    title: string;
    points?: number | null;
    user?: string | null;
    time: number;
    time_ago: string;
    comments_count: number;
    type: string;
    url?: string;
    domain?: string;
}
/**
 * UI friendly "item" representation. Based on the HackerNewsItem which is
 * returned directly from the HN API. Used mostly to represent comments.
 */
export interface Item {
    id: number;
    title: string;
    points: number | null;
    user: string | null;
    time: number;
    time_ago: string;
    content: string;
    deleted?: boolean;
    dead?: boolean;
    type: string;
    url?: string;
    domain?: string;
    comments: Item[];
    level: number;
    comments_count: number;
}
export interface User {
    about?: string;
    created_time: number;
    created: string;
    id: string;
    karma: number;
}
/**
 * Represents a tree of an item and its comments.
 */
export interface HackerNewsItemTree {
    item: HackerNewsItem;
    comments: (HackerNewsItemTree | null)[];
}
export declare const typeMapping: {
    [key: string]: string;
};
/**
 * Map a JSON object from the HN API to a slimmer "story" model
 * @param item
 */
export declare const story: (item: HackerNewsItem) => Story;
/**
 * Transform the HackerNewsItemTree to a UI friendly Item model.
 * @param tree
 */
export declare function itemTransform(tree: HackerNewsItemTree, level?: number): Item;
/**
 * Tramsforms a HackerNewsItemTree to a UI friendly Item model. This method
 * does more than you wish it would have to do. The HN API does not return
 * an accurate number of comments for a "story". Therefore Each tree must
 * be recursed and each item's comment array is reduced up to create the total.
 * @param tree
 */
export declare function itemMap(tree: HackerNewsItemTree): Item;
