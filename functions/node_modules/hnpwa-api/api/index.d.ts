export * from './interfaces';
import { Story, Item, User } from './interfaces';
export declare type ApiFn = (options: {}) => Promise<Story[]>;
export declare type ApiString = 'topstories' | 'newstories' | 'askstories' | 'showstories' | 'jobstories' | 'item' | 'user';
export interface ApiOptions {
    page: number;
}
export declare const MAX_PAGES: {
    [key: string]: number;
};
export declare const apiMap: {
    [key: string]: ApiString;
};
export interface Api {
    [key: string]: any;
    index(): {
        name: string;
    };
    news(options: ApiOptions): Promise<Story[]>;
    newest(options: ApiOptions): Promise<Story[]>;
    ask(options: ApiOptions): Promise<Story[]>;
    show(options: ApiOptions): Promise<Story[]>;
    jobs(options: ApiOptions): Promise<Story[]>;
    item(id: number): Promise<Item>;
    user(id: number): Promise<User | null>;
}
export declare type ApiCreator = (app: firebase.app.App) => Api;
/**
 * The aggregated API for interfacing with Hacker News.
 */
declare const api: ApiCreator;
export default api;
