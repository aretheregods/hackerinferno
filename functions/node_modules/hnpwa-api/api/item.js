"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Retrieves an "item" and its comment tree by an id. The building block of
 * the HN API is the "item". Everything is an item. A story, job, comments, and
 * nearly everything else. Each "item" has a list of "kids" which are the comments
 * for stories and the subcomments for comments.
 *
 * This method retrieves the individual item and then fetches each "kid" by its
 * id. The kids array is stripped out to save on bytes across the wire.
 * @param id
 * @param firebaseApp
 */
function getItemAndComments(id, firebaseApp) {
    return __awaiter(this, void 0, void 0, function* () {
        const itemRef = firebaseApp.database().ref('v0/item').child(id.toString());
        const snap = yield itemRef.once('value');
        const item = snap.val();
        if (!item) {
            return null;
        }
        let comments = [];
        if (item.kids && item.kids.length) {
            comments = yield Promise.all(item.kids.map((kid) => getItemAndComments(kid, firebaseApp)));
        }
        // strip kids from response
        delete item.kids;
        // TODO(davideast): Poll parts
        delete item.parts;
        return {
            item,
            comments
        };
    });
}
exports.getItemAndComments = getItemAndComments;
