#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const yargs = require("yargs");
const express = require("express");
const api_1 = require("./api");
const server_1 = require("./server");
const build_1 = require("./offline/build");
const argv = yargs.argv;
exports.serve = (opts) => {
    const { port, offline, routerPath } = opts;
    // TODO(davideast): Check for offline data if offline arg exists
    const expressApp = server_1.createExpressApp({ offline });
    const router = express.Router();
    router.use(routerPath, expressApp);
    const hostApp = express();
    hostApp.use(router);
    hostApp.listen(`${port}`, () => console.log(`Listening on ${port}!`));
};
exports.saveOfflineApi = () => {
    const app = server_1.initializeApp({ firebaseAppName: `${Date.now()}` });
    const hnapi = api_1.default(app);
    build_1.buildFiles(hnapi);
};
if (argv.serve) {
    exports.serve({
        port: argv.port || 3002,
        offline: argv.offline || false,
        routerPath: argv.routerPath || ''
    });
}
else if (argv.save) {
    exports.saveOfflineApi();
}
else if (argv.v || argv.version) {
    const pkg = require('./package.json');
    console.log(pkg.version);
}
else {
    const pkg = require('./package.json');
    console.log(`
  
  hnpwa-api version ${pkg.version}
  "${pkg.description}"

  Available commands:
    --serve (--serve --port=4000 --offline=true --routerPath="/api")
    --save # Saves current HN data set to node_modules/hnpwa-api/offline
    -v # or --version
    
  `);
}
