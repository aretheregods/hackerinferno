"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const firebase = require("firebase");
const express = require("express");
const compression = require("compression");
const api_1 = require("./api");
const api_2 = require("./offline/api");
exports.FIREBASE_APP_NAME = 'hnpwa-api';
// Hash of route matchers
exports.routes = {
    NEWS_AND_STUFF: /^\/(news.json|newest.json|ask.json|show.json|jobs.json)$/,
    ITEM: /^\/item\/(\d+).json$/,
    USER: /^\/user\/(\w+).json$/,
};
/**
 * Return a number within a maximum boundary. If the boundary of 10 is supplied
 * and 11 is passed as the page, 10 is returned.
 *
 * 10 = withinBounds(11, 10);
 * 1 = withinBounds(1, 10);
 * @param page
 * @param maxBounds
 */
function withinBounds(page, maxBounds = 10) {
    return Math.min(maxBounds, Math.max(1, parseInt(page, 10) || 1));
}
function getIndex(hnapi) {
    return (req, res) => {
        res.jsonp(hnapi.index());
    };
}
exports.getIndex = getIndex;
/**
 * Creates an express route handler based on a Firebase App instance.
 * Get a list of "stories" based on the parameters provided. This API maps to the
 * traditional "top bar" (news, ask, jobs, show) in HN UI's. Paging is provided
 * through the ?page query param.
 * @param firebaseApp
 */
function getNewsAndStuff(hnapi) {
    return (req, res) => __awaiter(this, void 0, void 0, function* () {
        // "news" | "ask" | "jobs" | "show" etc...
        const topic = req.params[0].replace('.json', '');
        const page = withinBounds(req.query.page);
        const newsies = yield hnapi[topic]({ page });
        res.jsonp(newsies);
    });
}
exports.getNewsAndStuff = getNewsAndStuff;
/**
 * Creates an express route handler based on a Firebase App instance.
 * Get an item and it's comments from a request id param and return the JSON representation of
 * the user.
 * @param firebaseApp
 */
function getItemAndComments(hnapi) {
    return (req, res) => __awaiter(this, void 0, void 0, function* () {
        const itemId = req.params[0];
        const item = yield hnapi.item(itemId);
        res.jsonp(item);
    });
}
exports.getItemAndComments = getItemAndComments;
/**
 * Creates an express route handler based on a Firebase App instance.
 * Get a user from a request id param and return the JSON representation of
 * the user.
 * @param firebaseApp
 */
function getUserInfo(hnapi) {
    return (req, res) => __awaiter(this, void 0, void 0, function* () {
        const userId = req.params[0];
        const user = yield hnapi.user(userId);
        res.jsonp(user);
    });
}
exports.getUserInfo = getUserInfo;
/**
 * Create a data api depending on the offline configuration. If offline is disabled
 * the data api will retrieve data from Firebase server. Otherwise it will read from
 * local files.
 * @param config
 * @param firebaseApp
 */
function getApi(config, firebaseApp) {
    let hnapi;
    if (!config.offline) {
        hnapi = api_1.default(firebaseApp);
    }
    else {
        // firebase app does nothing here
        hnapi = api_2.default(firebaseApp);
    }
    return hnapi;
}
/**
 * Creates a firebase app instance based on the configuration name.
 * @param config
 */
function initializeApp(config) {
    const possibleApp = firebase.apps.find(app => app.name === config.firebaseAppName);
    let app = possibleApp;
    if (!possibleApp) {
        app = firebase.initializeApp({ databaseURL: 'https://hacker-news.firebaseio.com/' }, config.firebaseAppName);
    }
    return app;
}
exports.initializeApp = initializeApp;
/**
 * Create a middleware handler for caching responses in the browser and CDN.
 * @param config
 */
function cacheControl(config) {
    const { cdnCacheExpiry, browserCacheExpiry, staleWhileRevalidate } = config;
    return (req, res, next) => {
        res.set('Cache-Control', `public, max-age=${browserCacheExpiry}, s-maxage=${cdnCacheExpiry}, stale-while-revalidate=${staleWhileRevalidate}`);
        next();
    };
}
/**
 * Attaches express route handlers for the HNAPI given a Firebase App instance and
 * a user's config.
 * @param expressApp
 * @param config
 */
function configureExpressRoutes(expressApp, config) {
    // Init firebase app instance
    const firebaseApp = initializeApp(config);
    // Create API instance from firebaseApp
    let hnapi = getApi(config, firebaseApp);
    expressApp.get('/', getIndex(hnapi));
    expressApp.get(exports.routes.NEWS_AND_STUFF, getNewsAndStuff(hnapi));
    expressApp.get(exports.routes.ITEM, getItemAndComments(hnapi));
    expressApp.get(exports.routes.USER, getUserInfo(hnapi));
    expressApp.get('/favicon.ico', (req, res) => res.status(204).end());
    expressApp.get('/_start', (req, res) => {
        res.set('Cache-Control', 'private');
        res.send(true);
    });
    return expressApp;
}
exports.configureExpressRoutes = configureExpressRoutes;
/**
 * Create an express application object based on the configuration passed in.
 * @param config
 */
function createExpressApp(config) {
    let expressApp = express();
    // Configure middleware
    if (config.useCompression) {
        expressApp.use(compression());
    }
    expressApp.use(cacheControl(config));
    // apply routes
    expressApp = configureExpressRoutes(expressApp, config);
    return expressApp;
}
exports.createExpressApp = createExpressApp;
/**
 * Create an express app instance without the middleware configuration.
 * This is used for testing or applications not hosted on Firebase Hosting.
 * @param firebaseAppName
 */
function createBareExpressApp(firebaseAppName = exports.FIREBASE_APP_NAME) {
    return configureExpressRoutes(express(), { firebaseAppName });
}
exports.createBareExpressApp = createBareExpressApp;
