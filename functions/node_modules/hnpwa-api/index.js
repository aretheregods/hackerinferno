"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const functions = require("firebase-functions");
const cors = require("cors");
const express = require("express");
const server_1 = require("./server");
/**
 * Configure the Cloud Function Trigger based on options. The configuration
 * allows you to set cache expiration, enable cors, enable compression,
 * set the Firebase App instance name, and set a local port for testing. The
 * local port should not be used in production.
 * @param config
 */
exports.trigger = (config) => {
    // merge defaults with config
    const mergedConfig = Object.assign({ useCors: false, routerPath: '', cdnCacheExpiry: 600, browserCacheExpiry: 300, staleWhileRevalidate: 120, firebaseAppName: server_1.FIREBASE_APP_NAME, useCompression: true, offline: false }, config);
    const expressApp = server_1.createExpressApp(mergedConfig);
    const router = express.Router();
    router.use(mergedConfig.routerPath || '', expressApp);
    const tscRouterHack = router;
    // wrap in cors if cors enabled
    if (mergedConfig.useCors) {
        const corsServer = cors({ origin: true });
        return functions.https.onRequest((req, res) => {
            corsServer(req, res, () => {
                tscRouterHack(req, res);
            });
        });
    }
    else {
        return functions.https.onRequest(tscRouterHack);
    }
};
exports.app = server_1.createBareExpressApp;
