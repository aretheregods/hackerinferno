/// <reference types="express" />
import * as firebase from 'firebase';
import * as express from 'express';
import { Api } from './api';
export declare const FIREBASE_APP_NAME = "hnpwa-api";
export interface ApiConfig {
    useCors?: boolean;
    routerPath?: string;
    useCompression?: boolean;
    browserCacheExpiry?: number;
    cdnCacheExpiry?: number;
    staleWhileRevalidate?: number;
    firebaseAppName?: string;
    offline?: boolean;
}
export declare const routes: {
    NEWS_AND_STUFF: RegExp;
    ITEM: RegExp;
    USER: RegExp;
};
export declare function getIndex(hnapi: Api): (req: express.Request, res: express.Response) => void;
/**
 * Creates an express route handler based on a Firebase App instance.
 * Get a list of "stories" based on the parameters provided. This API maps to the
 * traditional "top bar" (news, ask, jobs, show) in HN UI's. Paging is provided
 * through the ?page query param.
 * @param firebaseApp
 */
export declare function getNewsAndStuff(hnapi: Api): (req: express.Request, res: express.Response) => Promise<void>;
/**
 * Creates an express route handler based on a Firebase App instance.
 * Get an item and it's comments from a request id param and return the JSON representation of
 * the user.
 * @param firebaseApp
 */
export declare function getItemAndComments(hnapi: Api): (req: express.Request, res: express.Response) => Promise<void>;
/**
 * Creates an express route handler based on a Firebase App instance.
 * Get a user from a request id param and return the JSON representation of
 * the user.
 * @param firebaseApp
 */
export declare function getUserInfo(hnapi: Api): (req: express.Request, res: express.Response) => Promise<void>;
/**
 * Creates a firebase app instance based on the configuration name.
 * @param config
 */
export declare function initializeApp(config: ApiConfig): firebase.app.App;
/**
 * Attaches express route handlers for the HNAPI given a Firebase App instance and
 * a user's config.
 * @param expressApp
 * @param config
 */
export declare function configureExpressRoutes(expressApp: express.Application, config: ApiConfig): express.Application;
/**
 * Create an express application object based on the configuration passed in.
 * @param config
 */
export declare function createExpressApp(config: ApiConfig): express.Application;
/**
 * Create an express app instance without the middleware configuration.
 * This is used for testing or applications not hosted on Firebase Hosting.
 * @param firebaseAppName
 */
export declare function createBareExpressApp(firebaseAppName?: string): express.Application;
