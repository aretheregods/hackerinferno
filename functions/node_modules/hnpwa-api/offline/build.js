"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const api_1 = require("../api");
/**
 * Retrieve all stories across all pages into a single array.
 * @param hnapi
 * @param topic
 * @param opts
 * @param max
 * @param acc
 */
function getStories(hnapi, topic, opts, max, acc = []) {
    return __awaiter(this, void 0, void 0, function* () {
        const news = yield hnapi[topic](opts);
        const sum = acc.concat(news);
        const nextPage = opts.page + 1;
        if (opts.page >= max) {
            return sum;
        }
        opts = { page: nextPage };
        return getStories(hnapi, topic, opts, max, sum);
    });
}
/**
 * Create the offline files from the current online HN data set.
 * @param hnapi
 */
function buildFiles(hnapi) {
    return __awaiter(this, void 0, void 0, function* () {
        let promiseHash = {};
        Object.keys(api_1.MAX_PAGES).forEach(key => {
            if (typeof hnapi[key] !== 'function') {
                promiseHash[key] = Promise.resolve([]);
            }
            else {
                const opts = { page: 1 };
                const maxPage = api_1.MAX_PAGES[key];
                promiseHash[key] = getStories(hnapi, key, opts, maxPage);
            }
        });
        Object.keys(promiseHash).forEach((key) => __awaiter(this, void 0, void 0, function* () {
            const stories = yield promiseHash[key];
            if (stories.length > 0) {
                const json = JSON.stringify(stories);
                fs.writeFileSync(`${__dirname}/${key}.json`, json, 'utf8');
            }
            if (key === 'news') {
                const itemPromises = stories.map(story => hnapi.item(story.id));
                const allItems = yield Promise.all(itemPromises);
                const itemsJson = JSON.stringify(allItems);
                fs.writeFile(`${__dirname}/items.json`, itemsJson, 'utf8', () => {
                    process.exit(0);
                });
            }
        }));
    });
}
exports.buildFiles = buildFiles;
