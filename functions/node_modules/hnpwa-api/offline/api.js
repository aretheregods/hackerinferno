"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const TEST_USER = { about: '', created_time: 1400006274, created: "3 years ago", id: "davideast", karma: 22 };
const getFile = (topic) => {
    return require(__dirname + `/${topic}.json`);
};
const pageStories = (topic, options) => {
    const stories = getFile(topic);
    const opts = Object.assign({ page: 1 }, options);
    const limit = 30;
    const startIndex = (opts.page - 1) * limit;
    const endIndex = startIndex + limit;
    return stories.slice(startIndex, endIndex);
};
const offlineApi = (app) => {
    return {
        index() { return { name: 'Welcome to the HNPWA API' }; },
        news(options) {
            return __awaiter(this, void 0, void 0, function* () {
                return pageStories('news', options);
            });
        },
        newest(options) {
            return __awaiter(this, void 0, void 0, function* () {
                return pageStories('newest', options);
            });
        },
        ask(options) {
            return __awaiter(this, void 0, void 0, function* () {
                return pageStories('ask', options);
            });
        },
        show(options) {
            return __awaiter(this, void 0, void 0, function* () {
                return pageStories('show', options);
            });
        },
        jobs(options) {
            return __awaiter(this, void 0, void 0, function* () {
                return pageStories('jobs', options);
            });
        },
        user(id) {
            return __awaiter(this, void 0, void 0, function* () {
                return TEST_USER;
            });
        },
        item(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const items = yield getFile('items');
                return items.find(item => item.id == id);
            });
        }
    };
};
exports.default = offlineApi;
